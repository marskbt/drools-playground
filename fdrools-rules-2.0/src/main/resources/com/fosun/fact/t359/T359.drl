package com.fosun.fact.t359;


import com.fosun.fdrools.tools.*;
import com.fosun.fdrools.tools.dto.DynamicRuleInfoDTO;
import com.fosun.fdrools.tools.dto.RuleCommonDTO;
import com.fosun.fdrools.tools.dto.RuleParamDataDTO;
import com.fosun.fdrools.tools.dto.RuleDataSourceDTO;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSON;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Date;

function Boolean doValidationT359(String ruleCode,RuleCommonDTO commonDTO,RuleParamDataDTO paramDataDTO,Map ruleDataSourceMap,RuleResultDTO resultDTO){
    Logger.info("执行 T359");
    if(!Tools.isRuleCodeOK(ruleCode,"T359")){
        return Boolean.FALSE;
    }
    
     if(!ruleDataSourceMap.isEmpty()){
       int count = 0;
       RuleDataSourceDTO jxlMIDataSource = (RuleDataSourceDTO)ruleDataSourceMap.get("JxlMI");
       JSONObject resObj = (JSONObject)jxlMIDataSource.getDsRes();
       String userPhoneSuspicion =  resObj.getString("userPhoneSuspicion");
       JSONObject jsonObject = JSON.parseObject(userPhoneSuspicion);
          if (jsonObject != null && jsonObject.containsKey("phone_with_other_names")) {
                JSONArray phoneWithOtherNames = jsonObject.getJSONArray("phone_with_other_names");
                if (phoneWithOtherNames.size() > 1) {
                    for (int i = 0; i < phoneWithOtherNames.size(); i++) {
                        JSONObject jsonResult = phoneWithOtherNames.getJSONObject(i);
                        if (jsonResult.containsKey("susp_name") && jsonResult.containsKey("susp_updt")) {
                            Date updt = Tools.stringToDate(jsonResult.getString("susp_updt"), DateStyle.YYYY_MM_DD_HH_MM_SS);
                            Date now = Tools.addYear(new Date(), -2);
                            if (updt.after(now)) {
                                count++;
                                if (count > 1) {
                                    return Boolean.TRUE;
                                }

                            }
                        }
                    }

                }
            }
    }
    
    return Boolean.FALSE;
}

rule "T359"
when

$ruleResultDTO:RuleResultDTO();
$dynamicRuleInfoDTO:DynamicRuleInfoDTO(doValidationT359(ruleCode,ruleCommonDTO,ruleParamDataDTO,ruleDataSourceMap,$ruleResultDTO));
then

Map<String,Object> extraMap = new HashMap<String,Object>();
$ruleResultDTO.setResult(Tools.HIT);
$ruleResultDTO.setExtraResultMap(extraMap);
$dynamicRuleInfoDTO.setRuleResultDTO($ruleResultDTO);
end