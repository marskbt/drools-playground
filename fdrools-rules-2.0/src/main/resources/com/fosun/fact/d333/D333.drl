package com.fosun.fact.d333;


import com.fosun.fdrools.tools.*;
import com.fosun.fdrools.tools.dto.DynamicRuleInfoDTO;
import com.fosun.fdrools.tools.dto.RuleCommonDTO;
import com.fosun.fdrools.tools.dto.RuleParamDataDTO;
import com.fosun.fdrools.tools.dto.RuleDataSourceDTO;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSON;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

function Boolean doValidationD333(String ruleCode,RuleCommonDTO commonDTO,RuleParamDataDTO paramDataDTO,Map ruleDataSourceMap,RuleResultDTO resultDTO){
    Logger.info("执行 D333");
    if(!Tools.isRuleCodeOK(ruleCode,"D333")){
        return Boolean.FALSE;
    }
    
     if(!ruleDataSourceMap.isEmpty()){
       RuleDataSourceDTO jxlMIDataSource = (RuleDataSourceDTO)ruleDataSourceMap.get("JxlMI");
       JSONObject resObj = (JSONObject)jxlMIDataSource.getDsRes();
       String userBlackList =  resObj.getString("userBlacklist");
       JSONObject jsonObject = JSON.parseObject(userBlackList);
		if (jsonObject != null && jsonObject.containsKey("blacklist_category")) {
			JSONArray blacklistCategory = jsonObject.getJSONArray("blacklist_category");
			if(null != blacklistCategory && blacklistCategory.contains("法院")){
				return Boolean.TRUE;
			}else{
				return Boolean.FALSE;
			}
		}
    }
    
    return Boolean.FALSE;
}

rule "D333"
when

$ruleResultDTO:RuleResultDTO();
$dynamicRuleInfoDTO:DynamicRuleInfoDTO(doValidationD333(ruleCode,ruleCommonDTO,ruleParamDataDTO,ruleDataSourceMap,$ruleResultDTO));
then

Map<String,Object> extraMap = new HashMap<String,Object>();
$ruleResultDTO.setResult(Tools.HIT);
$ruleResultDTO.setExtraResultMap(extraMap);
$dynamicRuleInfoDTO.setRuleResultDTO($ruleResultDTO);
end