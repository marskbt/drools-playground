package com.fosun.fact.d405;


import com.fosun.fdrools.tools.*;
import com.fosun.fdrools.tools.dto.DynamicRuleInfoDTO;
import com.fosun.fdrools.tools.dto.RuleCommonDTO;
import com.fosun.fdrools.tools.dto.RuleParamDataDTO;
import com.fosun.fdrools.tools.dto.RuleDataSourceDTO;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSON;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Date;

function Boolean doValidationD405(String ruleCode,RuleCommonDTO commonDTO,RuleParamDataDTO paramDataDTO,Map ruleDataSourceMap,RuleResultDTO resultDTO){
    Logger.info("执行 D405");
    if(!Tools.isRuleCodeOK(ruleCode,"D405")){
        return Boolean.FALSE;
    }
    
     if(!ruleDataSourceMap.isEmpty()){
       RuleDataSourceDTO jxlMIDataSource = (RuleDataSourceDTO)ruleDataSourceMap.get("JxlMI");
       JSONObject resObj = (JSONObject)jxlMIDataSource.getDsRes();
       String userIdCardSuspicion =  resObj.getString("userIdCardSuspicion");
       JSONObject jsonObject = JSON.parseObject(userIdCardSuspicion);
		if (jsonObject != null && jsonObject.containsKey("idcard_with_other_names")) {
			JSONArray idcardWithOtherNames = jsonObject.getJSONArray("idcard_with_other_names");
			if(idcardWithOtherNames != null || idcardWithOtherNames.size()>0){
				int counter = 0;
				for (int i = 0; i < idcardWithOtherNames.size(); i++) {
					JSONObject jsonResult = idcardWithOtherNames.getJSONObject(i);
					if (jsonResult.containsKey("susp_updt")) {
						Date updt = Tools.stringToDate(jsonResult.getString("susp_updt"), DateStyle.YYYY_MM_DD_HH_MM_SS);
						Date now = Tools.addYear(new Date(), -2);
						if (updt.after(now)) {
							counter++;
							if(counter>1){
								return Boolean.TRUE;
								
							}
						}
					}
				}
			}
		}
    }
    
    return Boolean.FALSE;
}

rule "D405"
when

$ruleResultDTO:RuleResultDTO();
$dynamicRuleInfoDTO:DynamicRuleInfoDTO(doValidationD405(ruleCode,ruleCommonDTO,ruleParamDataDTO,ruleDataSourceMap,$ruleResultDTO));
then

Map<String,Object> extraMap = new HashMap<String,Object>();
$ruleResultDTO.setResult(Tools.HIT);
$ruleResultDTO.setExtraResultMap(extraMap);
$dynamicRuleInfoDTO.setRuleResultDTO($ruleResultDTO);
end