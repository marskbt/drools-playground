package com.fosun.fdrools.d378;
import com.fosun.fdrools.tools.*;
import com.fosun.fdrools.tools.dto.RuleDataSourceDTO;
import com.fosun.fdrools.tools.dto.RuleCommonDTO;
import com.fosun.fdrools.tools.dto.RuleParamDataDTO;
import com.fosun.fdrools.tools.dto.DynamicRuleInfoDTO;


import com.alibaba.fastjson.JSONObject;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSON;

function  Boolean doValidationD378(String ruleCode,RuleCommonDTO commonDTO,RuleParamDataDTO paramDataDTO,Map ruleDataSourceMap,RuleResultDTO resultDTO){
   Logger.info(" 执行  D378");
    if(!Tools.isRuleCodeOK(ruleCode,"D378")){
        return Boolean.FALSE;
    }

    if(!ruleDataSourceMap.isEmpty()){
       RuleDataSourceDTO afDataSource = (RuleDataSourceDTO)ruleDataSourceMap.get("AF_MIXED_RISK");
       JSONObject resObj = (JSONObject)afDataSource.getDsRes();
       String afRiskResult = resObj.getString("resultList");
       JSONArray array = JSON.parseArray(afRiskResult);
       if (array==null&&array.size()<=0){
            return Boolean.FALSE;
       }
       for (int i=0;i<array.size();i++){
           JSONObject jsonObject = array.getJSONObject(i);
           String riskDetailCode = jsonObject.getString("riskDetailCode");
           int riskTime = jsonObject.getInteger("riskTime");
           if ("15".equals(riskDetailCode)&&riskTime>= Tools.getAddYear(-2)){
               return true;
           }
       }
    }

    return Boolean.FALSE;
}

rule "D378"
    when
    $ruleResultDTO:RuleResultDTO();
    $dynamicRuleInfoDTO:DynamicRuleInfoDTO(doValidationD378(ruleCode,ruleCommonDTO,ruleParamDataDTO,ruleDataSourceMap,$ruleResultDTO));
    then
    Map<String,Object> extraMap = new HashMap<String,Object>();
    extraMap.put("testMap",123);
    $ruleResultDTO.setResult(Tools.HIT);
    $ruleResultDTO.setExtraResultMap(extraMap);
    $dynamicRuleInfoDTO.setRuleResultDTO($ruleResultDTO);
end



